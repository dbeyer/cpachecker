# This file is part of CPAchecker,
# a tool for configurable software verification:
# https://cpachecker.sosy-lab.org
#
# SPDX-FileCopyrightText: 2007-2020 Dirk Beyer <https://www.sosy-lab.org>
#
# SPDX-License-Identifier: Apache-2.0

# This configuration runs a single precision refinement
# for predicate abstraction.
# Computed predicates can be used in other analyses
# through the created predmap.txt or witness.graphml.

# Use summary edges for recursion handling
analysis.summaryEdges = true

# The analyses used for single craig interpolation run
#include components/violationWitnessValidation.properties

cegar.maxIterations = 1

#include includes/witness-validation.properties

# if we find a concurrent program, we copy the CFA to avoid colliding function names.
cfa.useCFACloningForMultiThreadedPrograms=true



# This file is part of CPAchecker,
# a tool for configurable software verification:
# https://cpachecker.sosy-lab.org
#
# SPDX-FileCopyrightText: 2007-2020 Dirk Beyer <https://www.sosy-lab.org>
#
# SPDX-License-Identifier: Apache-2.0

# Copied from components/violationWitnessValidation.properties

# Disable CPU time limit
limits.time.cpu =

cpa.composite.aggregateBasicBlocks = false

analysis.checkCounterexamples = false

# Note that we do not want to apply a value anlysis, as this may cause issues with the cegar schema
CompositeCPA.cpas = cpa.location.LocationCPA, cpa.callstack.CallstackCPA, cpa.functionpointer.FunctionPointerCPA, cpa.predicate.PredicateCPA

# Tell all analyses to skip (non-explicit) recursion
cpa.callstack.skipVoidRecursion = true
cpa.callstack.skipFunctionPointerRecursion = true

# ignore irrelevant variables.
# Otherwise witness-based craig interpolation is not comparable to internal craig interpolation
cpa.predicate.ignoreIrrelevantVariables = true

# Initial static refinement does not work well with witness automata
cpa.predicate.refinement.performInitialStaticRefinement = false
counterexample.export.allowImpreciseCounterexamples = true

cpa.arg.proofWitness = witness.graphml
cpa.arg.compressWitness = false
cpa.arg.witness.produceInvariantWitnesses = true

analysis.traversal.byAutomatonVariable=null
